import logging
from typing import Dict

import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware

from backend.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_headers=["*"],
    allow_methods=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
bot_data: Dict[str, Dict] = {}


@app.post("/telegram-webhook")
async def handle_telegram_webhook(request: Request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update)
    return {"status": "ok"}


@app.post("/webhook")
async def handle_webhook(request: Request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        data = await request.json()
        notifications = data.get("notifications", [])

        if not notifications:
            return {"status": "error", "message": "No notifications provided"}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for notification in notifications:
            chat_id = notification.get("chat_id")
            if not chat_id:
                continue

            message = format_notification_message(notification)
            try:
                await bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")
                logger.info(f"Notification sent to chat_id: {chat_id}")
            except Exception as e:
                logger.error(f"Failed to send notification to {chat_id}: {str(e)}")

        return {"status": "success", "message": f"{len(notifications)} notifications sent"}

    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return {"status": "error", "message": str(e)}


def format_notification_message(notification: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ HTML
    """
    tonality_emoji = {
        "POSITIVE": "üü¢",
        "NEGATIVE": "üî¥",
        "NEUTRAL": "‚ö™"
    }

    value_emoji = {
        1: "üîπ",  # LOW
        2: "üî∏",  # MEDIUM
        3: "üî∫"  # HIGH
    }

    tonality = notification.get("tonality", "NEUTRAL")
    value = notification.get("value", 1)
    regions = ", ".join(notification.get("regions", []))
    tickers = ", ".join(notification.get("tickers", []))

    return (
        f"{tonality_emoji.get(tonality, '‚ö™')} {value_emoji.get(value, 'üîπ')} <b>–ù–æ–≤–æ—Å—Ç—å –ø–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º</b>\n\n"
        f"<b>–†–µ–≥–∏–æ–Ω—ã:</b> {regions}\n"
        f"<b>–¢–∏–∫–µ—Ä—ã:</b> {tickers}\n"
        f"<b>–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {tonality}\n"
        f"<b>–í–∞–∂–Ω–æ—Å—Ç—å:</b> {value}\n\n"
        f"<a href='{settings.WEB_APP_URL}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</a>"
    )


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    try:
        username = message.from_user.username
        if not username:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram")
            return

        chat_id = message.chat.id

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    f"https://api2.academus-pobeda.ru/users/first_launch",
                    json={"username": username, "chat_id": chat_id},
                    timeout=5  # –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
                ) as response:
                    if response.status == 200:
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
                        builder = InlineKeyboardBuilder()
                        builder.add(types.InlineKeyboardButton(
                            text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                            url=settings.WEB_APP_URL
                        ))

                        await message.answer(
                            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!\n\n"
                            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:",
                            reply_markup=builder.as_markup()
                        )
                    elif response.status == 208:
                        builder = InlineKeyboardBuilder()
                        builder.add(types.InlineKeyboardButton(
                            text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                            url=settings.WEB_APP_URL
                        ))
                        await message.answer(
                            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ú–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:",
                            reply_markup=builder.as_markup()
                        )
                    else:
                        error_text = await response.text()
                        logger.error(f"API error: {error_text}")
                        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            except aiohttp.ClientError as e:
                logger.error(f"Connection error: {str(e)}")
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                logger.error(f"Unexpected error: {str(e)}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error in cmd_start: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def on_startup():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram
    webhook_url = f"{settings.TELEGRAM_WEBHOOK_URL}/telegram-webhook"
    await bot.set_webhook(webhook_url)
    logger.info(f"Telegram webhook set to {webhook_url}")


async def on_shutdown():
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    """
    await bot.delete_webhook()
    logger.info("Webhook deleted")


if __name__ == "__main__":
    import uvicorn

    # –î–æ–±–∞–≤–ª—è–µ–º on_startup –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    app.add_event_handler("startup", on_startup)
    app.add_event_handler("shutdown", on_shutdown)

    uvicorn.run(app, host='localhost', port=settings.TELEGRAM_PORT)

